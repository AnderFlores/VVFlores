<?php
namespace Deg540\PHPTestingBoilerplate\Test;

use Deg540\PHPTestingBoilerplate\StringCalculatorKata;
use PHPUnit\Exception;
use PHPUnit\Framework\TestCase;

class StringCalculatorKataTest extends TestCase
{
    /**
     * @var
     */
    private StringCalculatorKata $stringCalculatorKata;

    /**
     * @setup
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->stringCalculatorKata = new StringCalculatorKata();
    }
    /**
     * @test
     */
    public function when_empty_given_returns_0()
    {
        $result = $this->stringCalculatorKata->add("");
        $this->assertEquals("0", $result);
    }
    /**
     * @test
     */
    public function when_single_number_given_returns_same_number()
    {
        $number = "1";
        $result = $this->stringCalculatorKata->add($number);
        $this->assertEquals($number, $result);
    }
    /**
     * @test
     */
    public function when_two_numbers_separated_by_comas_given_returns_their_sum()
    {
        $numbers = "1,2";
        $result = $this->stringCalculatorKata->add($numbers);
        $this->assertEquals("3", $result);
    }
    /**
     * @test
     */
    public function when_three_numbers_separated_by_comas_given_returns_their_sum()
    {
        $numbers = "1,2,3";
        $result = $this->stringCalculatorKata->add($numbers);
        $this->assertEquals("6", $result);
    }
    /**
     * @test
     */
    public function when_two_numbers_separated_by_new_line_given_returns_their_sum()
    {
        $numbers = "1\n2";
        $result = $this->stringCalculatorKata->add($numbers);
        $this->assertEquals("3", $result);
    }

    /**
     * @test
     */
    public function when_three_numbers_separated_by_comas_and_new_lines_given_returns_their_sum()
    {
        $numbers = "1,2\n3";
        $result = $this->stringCalculatorKata->add($numbers);
        $this->assertEquals("6", $result);
    }

    /**
     * @test
     */
    public function when_negative_number_given_returns_exception()
    {
        $numbers = "-1";
        try {
            $result = $this->stringCalculatorKata->add($numbers);
        } catch (Exception $ex) {
            $this->assertEquals("Negative not allowed : -1", $ex->getMessage());
        }
    }

    /**
     * @test
     */
    public function when_multiple_negative_numbers_given_returns_exception()
    {
        $numbers = "-1,-2";
        try {
            $result = $this->stringCalculatorKata->add($numbers);
        } catch (Exception $ex) {
            $this->assertEquals("Negative not allowed : -1, -2", $ex->getMessage());
        }
    }

    /**
     * @test
     */
    public function when_negative_and_non_negative_numbers_given_returns_exception()
    {
        $numbers = "-1,-2,3";
        try {
            $result = $this->stringCalculatorKata->add($numbers);
        } catch (Exception $ex) {
            $this->assertEquals("Negative not allowed : -1, -2", $ex->getMessage());
        }
    }
}